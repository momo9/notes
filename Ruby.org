* assert & test

#+begin_src ruby
assert true, "msg"

expected = 2
actual = 1 + 1
assert_equal expected, actual

asser_match /pattern/, "msg"
#+end_src

* exception

#+begin_src ruby
begin
  <expression>
rescue Exception => ex
  <handle>
end
#+end_src

* nil

- =nil= is an object
- =nil.nil?= is =true=

* object

- _everything is object_
- object's id is a =Fixnum=
- according to an integer /n/, =n.object_id= is /2n+1/

* equal

- ~==~: compare the value, usually overridden
- =equal?=: never overridden, =true= only when two objects have _the same id_

* array

1. =a[x, y]=: =y= elements from =a[x]=
2. if ~x == a.length - 1~, =a[x, y]= is =[]=
3. if ~x > a.length - 1~, =a[x, y]= is =nil=
4. a, b = [1, 2] => a: 1, b: 2
5. a, b = [1, 2, 3] => a: 1, b: 2
6. a, *b = [1, 2, 3] => a: 1, b: [2, 3]
7. a, b = ~[1]~ => a: 1, b: nil
8. a, = [1, 2] => a: 1

* hash

#+begin_src ruby
h = {:one => "uno"}
h[:two] # nil
h.fetch(:two) # raise KeyError

h2 = Hash.new "default"
h2[:two] # "default"
#+end_src

1. =h.keys.class= and =h.values.class= are all =Array=
2. _default object of hash is the same object_
3. default object can be a block

* string

#+begin_src ruby
# "\"abc'"
%{"abc'}
%("abc')
%!"abc'!
#+end_src

1. ~s += k~ will create a new =String= and assign to =s=
2. ~s << k~ will modify =s=
3. =String= in Ruby can be modified
4. '\n' is \n, only \\ and \' will escape; "\n" is <return>
5. ?a is character /a/ and equal to =String= 'a'

* symbol

1. Symbols with the same name have the same id (they're the same object)
2. Just _reference_ a symbol may create it
3. /methods/, /constants/ are all symbols
4. Symbol in string
  #+begin_src ruby
  sym = :a
  s = "#{sym} and b" # "a and b", to_s will be used to symbol
  #+end_src
5. _Symbols are not immutable strings_

* method

#+begin_src ruby
def myMethod
  ...
end

# myMethod means the return value instead of the method

private :myMethod
#+end_src

* constant

#+begin_src ruby
C = 1

class A
  C = 2
  def c
    C      # 2
    A::C   # 2
    ::A::C # 2
    ::C    # 1
  end
end

class B
  C = 3
  class BA < A
    def c
      C # 3, constants in the lexical scope has precedence over constants from the inheritance hierarchy
    end
  end
end

class B::BB < A
  def c
    C # 2, constants from the inheritance hierarchy has precedence this time
  end
end
#+end_src

* loop

1. =break= can return value

#+begin_src ruby
10.times do
  ... # 10 times
end
#+end_src

* exception

1. =fail=: raise a =RuntimeError=
2. =raise <exception>=

#+begin_src ruby
begin # try
  ...
rescue Exception => ex # catch
  ...
ensure # finally
  ...
end
#+end_src

* block

#+begin_src ruby
def foo
  yield
end

foo { 1 + 2 } # 3, yield will be replaced by code in {}

def bar
  yield 'foo'
end

bar { |x| x } # 'foo', yield with argument

def que
  if block_given?
    yield
  else
    :no_block
  end
end

que { :block } # :block
que            # :no_block


up = lambda { |n| n.upcase }
up['h'] # 'H', call block explicitly
bar &up # 'FOO', use block as argument

#+end_src

* class

1. =self= refers to the object when in method
2. method in a module _can_ be overrided in class
3. class names are constants (varibles starting with upper characters)

* message passing (reflect)

#+begin_src ruby
obj.send(:method_name)
obj.respond_to?(:method_name)
#+end_src

1. if =method_missing= is overrided (normal behavior is raising =NoMethodError=), all =NoMethodError= will call this method
2. however, =respond_to?= return false when 1 happens

* other

1. "string"[/pattern/] will return the matched string (=nil= when not matched)
2. use =eval cmd= to execute =cmd= (a string)
3. =nil= and =false= are treated as =false=
4. class with =to_str= will be treated as =String=

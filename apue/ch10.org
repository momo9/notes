#+title: 信号

* 概念

- core：core dump 时的调试文件（通常这个功能需要开启才有）
- EINTR：阻塞时有信号产生
- sigsuspend：设置信号屏蔽字并挂起

* SIGCHLD

1. 子进程结束时，会变为 zombie，供父进程善后
2. 如果父进程不 wait，zombie 就会一直存在，直到父进程结束
3. 变 zombie 时，会发送 SIGCHLD 信号
4. 如果忽略 SIGCHLD 的话，子进程结束不会变 zombie （Linux 等是这样，但不是所有 unix 都这样）

* kill

1. kill 不是杀死进程，而是给信号
2. 发信号需要权限
3. 对于 *不* 阻塞的信号，kill 返回前信号就已经送达

* sleep、pause、alarm

1. 有信号时会被唤醒（然后不会再继续被挂起了！），信号处理函数 *结束后* 才返回
2. alarm 只有一个定时器，调用 alarm 会擦除之前的 alarm
3. 在繁忙的系统中，一般认为会在调用 pause 之后发生的信号可能在调用 pause 之前就发生了，这样程序就会被永远挂起
4. alarm 常常被用于控制会阻塞的系统调用的 _超时_ ：要实现这点通常需要设置，因为系统调用默认情况下常常是 _自动重启_ 的

* 屏蔽字

1. 用于阻塞信号
2. 如果阻塞某个信号，信号产生时是 _未决_ 状态，直到阻塞取消时，信号才被送出
3. UNIX 没有对信号进行排队，因此信号的顺序没有定义

* 跳转g

1. 进入信号处理函数时，对应的信号自动被屏蔽（要不乱套了）
2. 如果从信号处理函数中跳出，信号屏蔽字是乱的，用 =siglongjmp()= 就没有这个问题，它会保存屏蔽字的情况
3. 与信号相关的跳转中， =sigsetjmp()= 与 =siglongjmp()= 之间的顺序不确定，要做好判断
